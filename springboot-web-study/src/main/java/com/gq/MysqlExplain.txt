数据库相关语句：(注意：[]表示可有可无)
    一、表结构操作（DDL）
        1、创建 create table [表名](
                    字段1 type [约束] [comment 字段1注释]
                    字段2 type [约束] [comment 字段2注释]
                    ...
                    字段n type [约束] [comment 字段n注释]
               )[comment 表注释];
               其中约束有：非空约束 —— 限制该字段值不能为空 —— not null
                         唯一约束 —— 保证字段的所有数据都是唯一、不重复的 —— unique
                         主键约束 —— 主键是一行数据的唯一标识，要求非空且唯一 —— primary key（还可加上auto_increment主键自增）
                         默认约束 —— 保存数据时，如果未指定该字段值，则采用默认值 —— default
                         外键约束 —— 让两张表的数据建立连接，保证数据的一致性和完整性 —— foreign key （现在几乎不用了，在逻辑上进行约束）
        2、数据类型
        3、查询
            查询当前数据库所有表：show tables;
            查询表结构：desc 表名;
            查询建表语句：show create table 表名;
        4、修改
            添加字段：alter table 表名 add 字段名 类型（长度） [comment 注释] [约束];
            修改字段类型：alter table 表名 modify 字段名 新数据类型（长度）;
            修改字段名和字段类型：alter table 表名 change 旧字段名 新字段名 类型（长度） [comment 注释] [约束];
            删除字段：alter table 表名 drop column 字段名;
            修改表名：rename table 表名 to 新表名;
        5、删除
            删除表：drop table [if exists] 表名;（注意：在删除表时，表中的全部数据也会被删除）
    二、数据库操作（DML）
        1、添加数据 insert into 表名 (字段1,字段2,...) values(数据...),(数据1,数据2,...);
        2、修改数据 update 表名 set 字段名1 = 数据1,字段名2 = 数据2,... [where 条件];
        3、删除数据 delete from 表名 [where 条件];
    三、数据库查询操作（DQL）
        语法：select 字段列表 from 表名列表 where 条件列表 group by 分组字段列表 having 分组后条件列表 order by 排序字段列表 limit 分页参数 （可以用“as 别名”为字段或表添加别名，其中as可省略）
        1、基本查询数据：select 字段列表 from 表名;
        2、条件查询（where）：select 字段列表 from 表名 where 条件列表;
        3、聚合函数：1、count——统计数量；2、max——最大值；3、min——最小值；4、avg——平均值；5、sum——求和（注意：null值不参与所有聚合函数的运算）
            语法：select 聚合函数(字段列表) from 表名;
        4、分组查询（group by）：select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];
            其中where和having的区别：
                1、执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤
                2、判断条件统统：where不能对聚合函数进行判断，而having可以
        5、排序查询（order by）：select 字段列表 from 表名 [where 条件列表] [group by 分组字段] order by 字段1 排列方式1,字段2 排列方式2,...;(ASC:升序、DESC:降序)
        6、分页查询（limit）：select 字段列表 from 表名 limit 起始索引,查询记录数;（下标从0开始）
    四、多表查询
        1、内连接查询
            隐式内连接：select 字段列表 from 表1 表2 where 条件...;
            显示内连接：select 字段列表 from 表1 [inner] 表2 on 连接条件...;
        2、外连接查询
            左外连接查询：select 字段列表 from 表1 left [outer] join 表2 on 连接条件...;
            右外连接查询：select 字段列表 from 表1 right [outer] join 表2 on 连接条件...;
        3、子查询(嵌套查询)
            select * from 表1 where 字段1=(select 字段1 from 表2 ...);
            标量子查询：子查询返回的结果是单个值；常用的操作符：=、<>、>、>=、<、<=
            列子查询：子查询返回的结果是一列（可以是多行）；常用的操作符：in、not in等
            行子查询：子查询返回的结果是一行（可以是多列）：常用的操作符：=、<>、in、not in、
            表子查询：子查询返回的结果是多行多列，常作为临时表；常用的操作符：in
    五、事务
        事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，这些操作
        要么同时成功，要么同时失败
        注意：默认mysql的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务
        语法：
            开启事务：start transaction;/ begin;
            sql语句
            提交事务：commit;
            回滚事务：rollback;
        四大特性：
            1、原子性：事务是不可分割的最小单元，要么全部成功，要么全部失败
            2、一致性：事务完成时，必须使所有的数据都保持一致状态
            3、隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行（没有提交事务，其他用户查看不到数据库的变化）
            4、持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的
    六、索引
        索引是帮助数据库高效获取数据的“数据结构”
        优点：
            1、提高数据查询的效率，降低数据库的IO成本
            2、通过索引对数据进行排序，降低数据排序的成本，降低CPU消耗
        缺点：
            1、索引会占用存储空间
            2、索引大大提高了查询效率，同时却也降低了insert、update、delete的效率
        MySQL数据库支持的索引结构有：Hash索引、B+Tree索引、Full-Text索引等。默认是B+Tree索引
        语法：
            创建索引：create [unique] index 索引名 on 表名(字段名，...);
            查看索引：show index from 表名;
            删除索引：drop index 索引名 on 表名;
        注意：主键字段，在建表时，会自动创建主键索引
             添加唯一约束时，数据库实际上会添加唯一索引