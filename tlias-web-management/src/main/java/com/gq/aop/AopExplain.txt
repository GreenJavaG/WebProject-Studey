AOP（面向切面编程）：其实就是面向特定方法编程
    实现：动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，
    对特定的方法进行编程
    连接点：JoinPoint，可以被AOP控制的方法（暗含方法执行时的相关信息）
    通知：Advice，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）
    切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用
    切面：Aspect，描述通知与切入点的对应关系（通知+切入点）
    AOP通知类型：
        1、@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行
        2、@Before：前置通知，此注解标注的通知方法在目标方法前被执行
        3、@After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行
        4、@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行
        5、@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行
        注意：环绕通知需要自己调用ProceedingJoinPoint.proceed()来让原始方法执行，其他通知不需要考虑目标方法执行
             环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值
    执行顺序：
        1、不同切面类中，默认按照切面类的类名字母排序
            目标方法前的通知方法：字母排名靠前的先执行
            目标方法后的通知方法：字母排名靠前的后执行
        2、用@Order(数字)加在切面类上来控制顺序
            目标方法前的通知方法：数字小的先执行
            目标方法后的通知方法：数字小的后执行
    切入点表达式
        1、execution：
            主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：execution(访问修饰符? 返回值 包名.类名.?方法名(方法参数) throws 异常?)
            其中带?的表示可以省略的部分
            例：execution(public void com.gq.service.impl.DeptServiceImpl.delete(java.lang.Integer))
            可以使用通配符描述切入点
                *：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分
                    例：execution(* com.*.service.*.update(*))
                ..：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数
                    例：execution(* com.gq..DeptService.*(..))
        2、@annotation：
            用于匹配标识有特定注解的方法，例：@annotation(com.gq.anno.Log) 其中com.gq.anno.Log为注解类

